import { Ctx, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Context, Telegraf } from 'telegraf';
import { ParserService } from '../parser/parser.service';
import { Utils } from '../utils/utils.class';
import { DriverLap } from '../parser/classes/driver-lap.class';
import { VideoService } from '../video/video.service';
import * as fs from 'node:fs';
import { S3Client } from '@aws-sdk/client-s3';

@Update()
export class HandlerController {
  constructor(
    private parserService: ParserService,
    private videoService: VideoService,
    @InjectBot() private bot: Telegraf,
  ) {}

  @Start()
  async start(@Ctx() ctx: Context) {
    // console.log(ctx.msg);
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–µ–∑–¥—É –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞:
    
1) –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–µ–∑–¥
2) –ß–∞—Å—Ç—å —Å–≤–æ–µ–≥–æ –Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BoDuTeJlb)
3) –¢–∞–π–º–∏–Ω–≥ –ø–µ—Ä–≤–æ–π –æ—Ç—Å–µ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 00:15.234 –∏–ª–∏ 00:12 –∏–ª–∏ 14.123 –∏–ª–∏ 16)

–ü—Ä–∏–º–µ—Ä –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:

https://timing.batyrshin.name/tracks/premium/heats/68525
God
0:15

–ü–æ –≤—Å–µ–º –±–∞–≥–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º: @back_coder
`);
  }

  @On('message')
  async message(@Ctx() ctx: Context) {
    try {
      // –ü–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–æ—Ç–∞
      // const botInfo = await this.bot.telegram.getMe();
      // console.log(botInfo);
      // await this.bot.telegram.deleteChatPhoto('7430710863');

      if (!ctx.message) {
        throw new Error('–ù–µ –≤–∏–∂—É —Å–æ–æ–±—â–µ–Ω–∏—è');
      }

      // console.log('message', ctx.message);

      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      const inputText = ctx.message?.text || ctx.message?.caption;
      if (!inputText) {
        throw new Error('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞');
      }

      if (inputText.startsWith('sub')) {
        return await this.parseRaceSubscription(ctx, inputText);
      }
      if (inputText.startsWith('pit')) {
        return await this.parseRacePits(ctx, inputText);
      }
      if (inputText.startsWith('sound2')) {
        return await this.parseRaceSound(ctx, inputText);
      }

      const [url, name, offsetText, inputVideoPath] = inputText.split('\n');
      const { driver } = await this.parserService.parsePage(url, name);
      const offset = Utils.timeFromText(offsetText);
      if (!offset) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞—á–∞–ª–æ –æ—Ç—Å–µ—á–∫–∏');
      }

      const lapsToText = (laps: DriverLap[]) => laps.map((lap) => lap.toText(offset)).join('\n');

      // console.log(driver.laps.map((lap) => lap.time));
      let text = `${driver.name}\n\n`;

      const bestLaps = driver.getSortedLaps().slice(0, 5);
      text += `–¢–æ–ø 5 –ª—É—á—à–∏—Ö –∫—Ä—É–≥–æ–≤:\n${lapsToText(bestLaps)}\n\n`;

      let middleLaps = driver.getSortedLaps();
      const middleIndex = Math.floor(middleLaps.length / 2);
      middleLaps = middleLaps.slice(middleIndex - 3, middleIndex + 3);
      text += `–¢–æ–ø 5 –º–µ–¥–∏–∞–Ω–Ω—ã—Ö –∫—Ä—É–≥–æ–≤:\n${lapsToText(middleLaps)}\n\n`;

      const worstLaps = driver.getSortedLaps().slice(-5);
      text += `–¢–æ–ø 5 —Ö—É–¥—à–∏—Ö –∫—Ä—É–≥–æ–≤:\n${lapsToText(worstLaps)}\n\n`;

      const lastLaps = driver.laps.slice(-3);
      text += `3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫—Ä—É–≥–∞:\n${lapsToText(lastLaps)}\n\n`;

      text += `–í—Å–µ –∫—Ä—É–≥–∏:\n${lapsToText(driver.laps.slice(0, 20))}\n\n`;

      await ctx.reply(text);

      const videoUrl =
        'video' in ctx.message ? (await ctx.telegram.getFileLink(ctx.message.video.file_id)).href : undefined;
      if (videoUrl || inputVideoPath) {
        const videoPath = await this.videoService.parse({ driver, offset, url: videoUrl, inputPath: inputVideoPath });
        if (videoUrl) {
          await ctx.replyWithVideo({ source: fs.createReadStream(videoPath) });
          fs.rmSync(videoPath);
        } else {
          await ctx.reply('–ó–∞–∫–æ–Ω—á–∏–ª –º–æ–Ω—Ç–∞–∂');
        }
        const client = new S3Client({
          region: 'us-east-1',
          credentials: {
            accessKeyId: 'sosi',
            secretAccessKey: 'sosi',
          },
          forcePathStyle: true,
        });
      }
    } catch (error) {
      console.error(error);
      await ctx.reply(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:\n${error}`);
      // throw error;
    }
  }

  async parseRaceSubscription(ctx: Context, inputText: string) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [_command, name] = inputText.trim().split(' ');
    await ctx.reply(`–°–ª–µ–∂—É –∑–∞ ${name}`);
  }

  async parseRaceSound(ctx: Context, inputText: string) {
    const [_command, driverName, url] = inputText.trim().split(' ');
    if (!url) return;
    let lastLapCount = -1;
    let lastPitState: string[] = [];
    ctx.reply(`–°–ª–µ–∂—É –∑–∞ ${driverName}`);
    setInterval(async () => {
      try {
        const raceUrl = await this.parserService.findUrl(url);
        console.log(raceUrl);
        const { race } = await this.parserService.parsePage(raceUrl);
        const driver = race.drivers.find((driver) => driver.name.includes(driverName));
        if (!driver) {
          return;
        }
        const lastLap = driver.laps.at(-1)!;
        const pitlane = race.pitlane![0].slice();
        if (lastLap.count != lastLapCount) {
          const stintsCount = driver.laps.filter((lap) => lap.isPit()).length + 1;
          const stintLaps =
            stintsCount <= 1
              ? driver.laps.length
              : Math.max(
                  driver.laps
                    .slice()
                    .reverse()
                    .findIndex((lap) => lap.isPit()),
                  0,
                ) + 1;
          const time = lastLap.time.toFixed(2);
          ctx.reply(`–ö—Ä—É–≥ ${stintLaps} –ø—Ä–æ–µ—Ö–∞–ª –∑–∞ ${time}`);
          Utils.makeSound(`–ö—Ä—É–≥ ${stintLaps}. –í—Ä–µ–º—è ${time}. –í –ø–∏—Ç–∞—Ö ${pitlane.join('. ')}. ${pitlane.join('. ')}`);
          lastLapCount = lastLap.count;
        }
        if (race.pitlane && lastPitState[0] != race.pitlane[0][0]) {
          ctx.reply(`–ü–∏—Ç—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å: ${pitlane.join(',')}`);
          // Utils.makeSound(`–ü–∏—Ç—ã ${pitlane.join(' –∏ ')}`);
          lastPitState = pitlane;
        }
      } catch (error) {
        console.warn(error);
      }
    }, 3e3);
  }

  async parseRacePits(ctx: Context, inputText: string) {
    const opt: { [index: string]: string } = {
      '35': 'üü°üü¢ 26.798 –°—É–ø–µ—Ä –ø–ª–æ—Ö–æ, –æ–¥–Ω–æ –∏–∑ –∫–æ–ª–µ—Å –Ω–∞–ø—Ä–æ—á —Å–¥—É—Ç–æ',
      '44': 'üü¢ 26.966 + –ö–∞–π—Ñ, –≤ –Ω–∞—á–∞–ª–µ –≥–æ–Ω–∫–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –µ–¥—É –Ω–∞ –Ω–µ–º',
      '31': 'üü°üü¢ 26.975 –°–∫–æ–ª—å–∑–∫–∏–π, —Ç—è–∂–µ–ª—ã–π, –¥–æ–≤–æ–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π (–±—ã—Å—Ç—Ä–∞—è –≤ –Ω–∞—á–∞–ª–µ, –ø–æ—Ç–æ–º —É–ø–∞–¥–µ—Ç)',
      '34': 'üü° –ü–æ —Ö–æ–ª–æ–¥–Ω–æ–π –Ω–∏—á–µ —Ç–∞–∫, –µ—Ö–∞–ª 27.4',
      '41': 'üü°üü¢ 27.055 + –†–∞–∫–µ—Ç–∞, –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ (–±—ã—Å—Ç—Ä–∞—è –≤ –Ω–∞—á–∞–ª–µ, –ø–æ—Ç–æ–º —É–ø–∞–¥–µ—Ç)',
      '42': 'üü°üü¢ 26.981 + –ß—É—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ',
      '36': 'üü¢üü¢ ?–≠—Ä–∏–∫: —Ä–µ–¥ —Ñ–ª–∞–≥, —Ç–æ—Ä–º–æ–∑–∞ –ø–ª–æ—Ö–∏–µ, –∫–∞—Ä—Ç –ø–ª–æ—Ö–æ–π üîµ',
      '37': 'üü°üü¢ 26.953 –≠—Ä–∏–∫: —Å—Ä–µ–¥–Ω–∏–π, —Ç—è–∂–µ–ª—ã–π –¥–æ–≤–æ–ª—å–Ω–æ, —Å–∫–æ–ª—å–∑–∫–∏–π',
      '43': 'üîµ 27.352 !–ü–ò–ó–î–ï–¶! –≠—Ä–∏–∫: —Å—Ä–µ–¥–Ω–∏–π, –Ω–µ–ø–ª–æ—Ö–æ–π, —Ä—É–ª–µ–∂–Ω—ã–π (–Ω–æ–≤—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å) (–ø–æ–¥–Ω—è–ª–∏)',
      '39': 'üî¥ 27.175 –≠—Ä–∏–∫: –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –ù–∏–∫–∏—Ç–∞ –ø—Ä–æ–µ—Ö–∞–ª 27.4, –æ—á–µ–Ω—å —Ç–∞–∫–æ–µ —Å–ø–æ—Ä–Ω–æ–µ',
      '33': 'üü° 27.002 –≠—Ä–∏–∫: —Å—Ä–µ–¥–Ω–∏–π',
      '32': 'üü° 27.077 –≠—Ä–∏–∫: –Ω–µ–ø–ª–æ—Ö–æ–π, –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∫–µ—Ç–∞, –Ω–æ —É –º–µ–Ω—è –Ω–∞ —Ç–∞–π–º –∞—Ç–∞–∫–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å',
      '38': 'üü°üü¢',
      '40': 'üü°üü¢',
    };

    const kartDesc = (kart: string) => {
      return opt[kart] || 'unknown';
    };

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [_command, url] = inputText.trim().split(' ');
    const { race } = await this.parserService.parsePage(url);
    let message = '';
    if (race.pitlane) {
      message += `–í –ø–∏—Ç–∞—Ö:\n${race.pitlane[0][0]} - ${kartDesc(race.pitlane[0][0])}\n${race.pitlane[0][1]} - ${kartDesc(
        race.pitlane[0][1],
      )}\n\n`;
    }
    message += race.drivers
      .map((driver, index) => {
        const totalLaps = 60;
        const minStintLaps = 10;
        const laps = driver.laps.length;
        const stintsMaxCount = 3;
        const stintsCount = driver.laps.filter((lap) => lap.isPit()).length + 1;
        const stintLaps =
          stintsCount <= 1
            ? laps
            : Math.max(
                driver.laps
                  .slice()
                  .reverse()
                  .findIndex((lap) => lap.isPit()),
                0,
              );
        const maxStintLaps = totalLaps - (laps - stintLaps) - (stintsMaxCount - stintsCount) * minStintLaps;
        return `${index + 1}. ${
          driver.name
        }:\n–ö—Ä—É–≥–∏: ${laps}/${totalLaps} | –°—Ç–∏–Ω—Ç ‚Ññ${stintsCount}: ${stintLaps}/${maxStintLaps}\n${
          driver.kart
        } - ${kartDesc(driver.kart)}\n`;
      })
      .join('\n');
    await ctx.reply(message);
  }
}
